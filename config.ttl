# Licensed under the terms of http://www.apache.org/licenses/LICENSE-2.0

## Fuseki memory + TDB + reasoner

@prefix :        <#> .
@prefix fuseki:  <http://jena.apache.org/fuseki#> .
@prefix rdf:     <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs:   <http://www.w3.org/2000/01/rdf-schema#> .
@prefix tdb:     <http://jena.hpl.hp.com/2008/tdb#> .
@prefix ja:      <http://jena.hpl.hp.com/2005/11/Assembler#> .

[] rdf:type fuseki:Server ;
   # Timeout - server-wide default: milliseconds.
   # Format 1: "1000" -- 1 second timeout
   # Format 2: "10000,60000" -- 10s timeout to first result, then 60s timeout to for rest of query.
   # See java doc for ARQ.queryTimeout
   # ja:context [ ja:cxtName "arq:queryTimeout" ;  ja:cxtValue "10000" ] ;

   # ja:loadClass "your.code.Class" ;

   fuseki:services (
     <#memory>
	 <#test>
     <#tdb>
   ) .

# Custom code.
[] ja:loadClass "com.hp.hpl.jena.tdb.TDB" .

# TDB
tdb:DatasetTDB  rdfs:subClassOf  ja:RDFDataset .
tdb:GraphTDB    rdfs:subClassOf  ja:Model .

## ---------------------------------------------------------------
## Updatable in-memory dataset.

<#memory> rdf:type fuseki:Service ;
    # URI of the dataset -- http://host:port/memory
    fuseki:name                     "memory" ; 

    # SPARQL query services e.g. http://host:port/memory/sparql?query=...
    fuseki:serviceQuery             "sparql" ;
    fuseki:serviceQuery             "query" ;
    # SPARQL Update service -- http://host:port/memory/update?request=...
    fuseki:serviceUpdate            "update" ;   # SPARQL query service -- /memory/update

    # Upload service -- http://host:port/memory/upload?graph=default or ?graph=URI or ?default
    # followed by a multipart body, each part being RDF syntax.
    # Syntax determined by the file name extension.
    fuseki:serviceUpload            "upload" ;   # Non-SPARQL upload service

    # SPARQL Graph store protocol (read and write)
    # GET, PUT, POST DELETE to http://host:port/memory/data?graph= or ?default=
    fuseki:serviceReadWriteGraphStore      "data" ;     

    # A separate read-only graph store endpoint:
    fuseki:serviceReadGraphStore       "get" ;   # Graph store protocol (read only) -- /memory/get

    fuseki:dataset           <#dataset1> ;
    .

## In-memory, initially empty.
<#dataset1> rdf:type ja:RDFDataset ;
    ja:defaultGraph       <#mem_inf> ;
     .

# ---- RDFS Inference models
# These must be incorporate in a dataset in order to use them.
# All in one file.

<#mem_inf> a ja:InfModel ;
    rdfs:label "RDFS Inference Model" ;
    ja:baseModel 
        [ a ja:MemoryModel ;
          ja:content [ja:externalContent <file:Data/test_data_rdfs.ttl>] ;
        ] ;
    ja:reasoner
         [ ja:reasonerURL <http://jena.hpl.hp.com/2003/RDFSExptRuleReasoner> ]
    .

## ---------------------------------------------------------------
## TDB dataset.

<#tdb>  rdf:type fuseki:Service ;
    fuseki:name              "tdb" ;             # http://host/tdb
    fuseki:serviceQuery      "sparql" ;          # SPARQL query service
    fuseki:serviceQuery      "query" ;
    fuseki:serviceUpdate     "update" ;
    fuseki:dataset           <#dataset2> ;
    .

<#dataset2> rdf:type       ja:RDFDataset ;
    ja:defaultGraph       <#tdb_inf> ;
     .

# ---- RDFS Inference models
# These must be incorporate in a dataset in order to use them.
# All in one file.

<#tdb_inf> a ja:InfModel ;
    rdfs:label "RDFS Inference Model" ;
    ja:baseModel <#tdbGraph> ;
    ja:reasoner
         [ ja:reasonerURL <http://jena.hpl.hp.com/2003/RDFSExptRuleReasoner> ]
    .

<#tdbGraph> a tdb:GraphTDB;
    tdb:location "DB";
    .
